{
  "hash": "1cfe654fc6e67109db5cc1a463e007be",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Módulo 03- Introducao \"\nauthor:\n  - \"Michelli Inácio Gonçalves Funnicelli\"\n  - \"Daniel Guariz Pinheiro\"\n  - \"Marcos Rogério André\"\neditor: visual\n---\n\n# Introdução ao R (e RStudio)\n\n# Instalação R e RStudio\n\n# Ambiente R e RStudio<br>\n\n1.  Script: Local onde escrevemos o código (perene);<br>\n2.  Console: Local onde escrevemos o código (temporário) e observamos os resultaydos;<br>\n3.  Ambiente/Histórico: Variaveis/Objetos salvos; Histórico de códigos rodados;<br>\n4.  Arquivos/Plots/Pacotes/Ajuda\n\n![](images/rstudio-interface.png)\n\nTeclas de Atalho\n\nCtrl+7\n\n# Instalação de pacotes\n\nA forma mais simples para instalacao usa de GUI fornecida pelo Rstudio. Para instalar os pacotes acesse o painel de Packages (Pacotes) ou pressione as teclas Ctrl+7.\n\n![](images/rstudio-painel.png){fig-align=\"center\"}\n\n![Painel de Pacotes Rstudio](images/rstudio-pane.png){fig-align=\"center\"}\n\nNo canto superior esquerdo do painel de pacotes, clique no botão Instalar para abrir a caixa de diálogo da Figura 3.2.\n\n![Caixa de dialogo de instalacao de pacotes do Rstudio](images/package-dialog.png){fig-align=\"center\"}\n\nA partir daqui, basta digitar o nome do pacote e clicar em Instalar. Para instalar vários pacotes de uma só vez, informe os nomes separados por vírgulas. O R fará o download e a instalação, deixando os pacotes disponíveis para uso. Se você marcar a opção Instalar dependências, o R também baixará e instalará automaticamente todos os pacotes necessários para que o pacote escolhido funcione.\n\nComo alternativa, é possível instalar pelo console com um comando simples:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"gganimate\")\n```\n:::\n\n\nIsso é equivalente ao procedimento pela interface gráfica. Para obter versões de desenvolvimento — por exemplo, pacotes diretamente do GitHub ou de outros repositórios fora do CRAN — utilize os pacotes devtools ou remotes:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Instale uma vez, se ainda não tiver\ninstall.packages(\"remotes\")   # ou: install.packages(\"devtools\")\n\n# Instalar a partir do GitHub\nremotes::install_github(\"thomasp85/gganimate\")\n# ou\ndevtools::install_github(\"thomasp85/gganimate\")\n```\n:::\n\n\n# Desisntalando Pacotes\n\n# Carregamento de Pacotes\n\nPara carregar um pacote no R e disponibilizar suas funções, utilize as funções library() ou require(), que são semelhantes, mas require() retorna um warning em vez de um erro se o pacote não estiver instalado, sendo preferível em scripts. \nApós a instalação, os pacotes são carregados na memória da sessão atual para uso, sempre que iniciar uma nova sessao sera necessario carregar o pacote.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(AATtools)\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrequire(AATtools)\n```\n:::\n\n\n# Descarregamento de Pacotes\n\nÀs vezes, um pacote precisa ser descarregado. Isso é bastante simples: desmarcando a caixa de seleção no painel Pacotes do RStudio ou usando a função detach. A função recebe o nome do pacote precedido por \"pacote:\" entre aspas.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndetach(\"package:gganimate\")\n```\n:::\n\n\n\n# Bases do R\n\n## Operadores\n\n\n\nCaracteres especiais capazes de realizar operacoes básicas.\n\n**Operadores aritimeticos:**\nPermite realizar operações básicas de forma direta. Como uma calculadora\n\n| Operador    | Descrição                               |\n| ----------- | --------------------------------------- |\n| `+`         | adição                                  |\n| `-`         | subtração                               |\n| `*`         | multiplicação                           |\n| `/`         | divisão                                 |\n| `^` ou `**` | exponenciação                           |\n| `x %% y`    | módulo (*x mod y*). Ex.: `5 %% 2` é `1` |\n| `x %/% y`   | divisão inteira. Ex.: `5 %/% 2` é `2`   |\n\nAdicao\n\n::: {.cell}\n\n```{.r .cell-code}\n1+1\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n1+5+20\n```\n:::\n\n\nsubtração\n\n::: {.cell}\n\n:::\n\n\nmultiplicação\n\n::: {.cell}\n\n```{.r .cell-code}\n3*5\n```\n:::\n\n\ndivisao\n\n::: {.cell}\n\n```{.r .cell-code}\n10/2\n```\n:::\n\n\nexponenciacao\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n5 %/% 2\n```\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\n5 %% 2\n```\n:::\n\n\n\n\nAssim como na matemática, também no R existem regras de precedência de operações com um detalhe: os parênteses sempre tem preferência, ou precedência, sendo usados para colocarmos as operações na ordem desejada, ou seja, as operações entre parênteses tem prioridade sobre outras operações. Veja o exemplo abaixo:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(5*20) + 1\n```\n:::\n\n\n\n\n\n**Operadores de comparacao**\nPermite comparar valores e expressões, retorna valores boleanos: Verdadeiro (TRUE; T) ou Falso (FALSE; F).\n\n| **Símbolo** | **Operação**     | **Exemplo** | **Descrição**                                     |\n| ----------- | ---------------- | ----------- | ------------------------------------------------- |\n| `<`         | Menor que        | `a < b`     | Retorna **TRUE** se `a` for menor que `b`.        |\n| `>`         | Maior que        | `a > b`     | Retorna **TRUE** se `a` for maior que `b`.        |\n| `==`        | Igual a          | `a == b`    | Retorna **TRUE** se `a` for igual a `b`.          |\n| `!=`        | Diferente de     | `a != b`    | Retorna **TRUE** se `a` for diferente de `b`.     |\n| `<=`        | Menor ou igual a | `a <= b`    | Retorna **TRUE** se `a` for menor ou igual a `b`. |\n| `>=`        | Maior ou igual a | `a >= b`    | Retorna **TRUE** se `a` for maior ou igual a `b`. |\n\n\n**Operadores logicos**\n\n| **Símbolo** | **Operação**                 | **Exemplo**        | **Descrição**                                                             |\n| ----------- | ---------------------------- | ------------------ | ------------------------------------------------------------------------- |\n| `!x`        | Negação                      | `!TRUE`            | Inverte o valor lógico: `TRUE` ↔ `FALSE`.                                 |\n| `x & y`     | E (funcionamento vetorial)   | `c(T,T) & c(T,F)`  | Compara par a par; retorna `TRUE` onde ambos são `TRUE`.                  |\n| `x && y`    | E (para 1 elemento)          | `(1>0) && (2>1)`   | Avalia apenas o primeiro elemento de cada lado; útil em testes escalares. |\n| `x \\| y`    | OU (funcionamento vetorial)  | `c(T,F) \\| c(F,F)` | Compara par a par; `TRUE` se pelo menos um for `TRUE`.                    |\n| `x \\|\\| y`  | OU (para 1 elemento)         | `(1>0) \\|\\| (2<1)` | Avalia apenas o primeiro elemento de cada lado.                           |\n| `isTRUE(x)` | Checa se é `TRUE`            | `isTRUE(1 > 0)`    | Retorna `TRUE` somente se `x` for `TRUE` escalar (não `NA`, não vetor).   |\n\nNegação \n\n\n::: {.cell}\n\n```{.r .cell-code}\na <- !TRUE\nprint(a)\n```\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Negar uma condição (use parênteses quando houver comparação)\nx <- 1:6\n!(x > 3)        # TRUE para 1,2,3\n```\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\ny <- c(10, NA, 20)\ny[!is.na(y)]   # 10 20   (remove NAs)\n```\n:::\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nb <- !(6 != 6)\nprint(b)\n```\n:::\n\n\n\n\n\n\n**Operador de atribuicao**\nPermite atribuir valores a um objeto. São válidos os símbolos '<-' e '='.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Operadores de atribuição:\n\na <- 3   # Cria um objeto 'a' de valor 3\na        # Visualiza o objeto 'a'\n\nb = 2     \nb\n\na + b    # Operações válidas para o valor interno serão executadas normalmente.\na - b\na == b\n```\n:::\n\n\n\n## Variaveis\n\n## Remocao de variaveis\n\n## Tipos de dados\n\n### Vetores\n\n### Dataframes\n\n### Listas\n\n### Matrizes\n\n### Arrays\n\n## Chamando Funcoes\n\n## Documentacao de funcoes\n\n## Dados esquecidos (Missing data)\n\n## Pipes\n\n\n# Lendo dados dentro do R\n\nLendo arquivos CSVs\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nu <- \"https://raw.githubusercontent.com/dickoa/penguins/master/data/penguins_lter.csv\"\npenguins_lter <- read.delim(u, sep = \",\", header = TRUE, check.names = FALSE)\n\n\nhead(penguins_lter)\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nu <- \"https://raw.githubusercontent.com/dickoa/penguins/master/data/penguins_size.csv\"\n\npenguins_size <- \n  read.table(\n    u,\n    sep = \",\",\n    header = TRUE,\n    na.strings = c(\"NA\", \"\"),\n    comment.char = \"\",        # evita tratar '#' como comentário\n    check.names = FALSE,      # preserva nomes de colunas\n    stringsAsFactors = FALSE, # evita factors\n    fileEncoding = \"UTF-8\"\n  )\n\n\nhead(penguins_size)\n```\n:::\n\n\n\nDiferentemente dos metodos anteriores read nao pode realizar leitura dos dados diretamente a partir de um link, entao os arquivos precisam ser baixados primeiramente.\n\n::: {.cell}\n\n```{.r .cell-code}\n# u <- \"https://figshare.com/ndownloader/files/36554577/Global_dataset.xlsx\"\n# \n# u_enc <- utils::URLencode(u, reserved = TRUE)\n# teste <- download.file(u, destfile = \"ExcelExample.xlsx\", method = \"curl\")\n```\n:::\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}